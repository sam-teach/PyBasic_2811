'''
Пример поиска решения ДЗ
Проверить, является ли число простым(делится без остатка только на 1 и себя)
'''

# # зададим случайное число
# num = 119
# # переберем числа от 2 до самого числа(исключая его)
# for i in range(2, num):
#     # если число делится без остатка, то оно не простое
#     if num % i == 0:
#         print('не простое')
#         # прервем выполнение цикла
#         break
# # если цикл завершился без прерываний, значит число простое
# else:
#     print('число простое')

'''
Списки - тип данных позволяющий хранить под одним именем
 множество разнообразных объектов, является итерируемым элементом
'''
# создание списка
# my_list = list()
# my_list2 = []
# my_list3 = [1, 2, 3, '1234556', 3.2, my_list]
# my_list4 = list('123 asdf asdf asdf sdfvc sdef')
# s = 'Vasa 123 132 5 sdfvc sdef'
# my_list5 = s.split()
# print('my_list -> ', my_list)
# print('my_list2 -> ', my_list2)
# print('my_list3 -> ', my_list3)
# print('my_list4 -> ', my_list4)
# print('my_list5 -> ', my_list5)

# обращение к элементам
#     0  1  2  3  4  5 0    1    2      6
# li = [1, 2, 3, 4, 5, ['a', 'b', 'c'], 'Anatoliy']
# print('li', li)
# print('li[2]', li[2])
# print('li[5]', li[5])
# print('li[5][1]', li[5][1])  # обращение к элементу списка в списке
# # пример списка в списке - матрица
# matrix = [
#     [1, 2, 3, 4, 5],
#     [2, 4, 1, 5, 6],
#     [1, 1, 0, 3, 5],
# ]
# print('li[2:5]', li[2:5])  # срез
# print('li[-2]', li[-2])  # отрицательный индекс
# # перебор списка по индексу
# print('''for index in range(len(li)):
#     print(li[index], end=' ')''')
# for index in range(len(li)):
#     print(li[index], end=' ')
# print()
# # перебор списка по элементно
# print('''for element in li:
#      print(element, end=' ')''')
# for element in li:
#     print(element, end=' ')
# print()

# изменение списка
# li = [1, 2, 3, 4, 5]
# print('li', li)
# li[2] = 999  # изменение одного элемента по индексу
# print('li', li)
# li[1:4] = [111, 222, 333, 444]  # изменение части списка с обращением по срезу(заменяется на другой список)
# print('li', li)
# print(li[::2])
# li[::2] = [5, 55, 555]  # элементы выбранные слева меняются на элементы справа
# print('li', li)
# # python style
# li[1], li[3] = li[3], li[1]
# print('li', li)

# методы списков
# li = [3, 2, 6, 8, 1, 0, 9, 5, 2, 5, ]
# print('li', li)
# li.append('blabla')  # добавление в конец списка
# print('li', li)
# li.insert(3, [11, 22, 2, 33])  # добавление в заданную позицию(индекс)
# print('li', li)
# del (li[4])  # удаление элемента по индексу
# print('li', li)
# # del (li[19]) #IndexError: list assignment index out of range
# li.remove(5)  # удаление элемента по значению (первое вхождение)
# print('li', li)
# # li.remove(111)#ValueError: list.remove(x): x not in list
# print(li.pop(5))  # удаление элемента по значению (первое вхождение) и возвращает его в качестве результата
# print('li', li)
# print(li.pop())  # по умолчанию выдавливает последний элемент
# print('li', li)
# print('li.count(2)', li.count(2))  # возвращает количество вхождений элемента
# del (li[3])  # перед сортиртовкой нужно оставить в списке элементы пригодные ку сравнению
# li.sort()  # сортировка списка
# print('li', li)
# li.sort(reverse=True)  # сортировка в обратном порядке
# print('li', li)

# li = [3, 2, 6, 8, 1, 0, ['a', 'b', 'c'], 9, 5, 2, 5]
# print(li)
# # обозначим проблему
# li2 = li  # скопируем список
# li2[4] = 'заменил что-то'  # изменил второй список
# print('li2', li2)  # проверил что заменилось
# print('li', li)  # а вот и боль
# #     здесь отличие
# li2 = li.copy()  # решение, создание копии списка с помощью метода
# li2[4] = 'изменил что-то  снова'
# print('li2', li2)  # проверил что заменилось
# print('li', li)  # а вот и нет боли
# print()
# print()
# # список внутри списка будет скопирован как ссылка и поэтому изменения затрагивают обе копии
# li[6][1] = 11111
# print('li', li)
# print('li2', li2)
# решение данной проблемы - использование внешнего метода копирования, основанного на рекурсивном алгоритме
# в неи проверяется тип данных и если встречается список(внутри списка), то для него будет
# создана полноценная копия
li = [1, 2, 3,['123', '456', '798'], 3]
import copy  # включение внешнего модуля

li2 = copy.deepcopy(li)
li2[3][0] = 'ababagalamaga'
print('li2', li2)
print('li', li)
